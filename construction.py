# -*- coding: utf-8 -*-
"""Construction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZO3TdKxsRrjkjibwO0kBdoX4bRlgvVZc
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import mean_absolute_error, r2_score, accuracy_score, precision_score, recall_score, f1_score

# Simulate reading the dataset (replace this with actual file reading if necessary)
# df_construction = pd.read_csv("path_to_your_file.csv")

# Simulate a construction project dataset
np.random.seed(42)

# Number of entries (simulating different construction phases/tasks)
n = 1000

# Simulated fields for the dataset
data = {
    'Project_ID': np.random.randint(1000, 2000, n),
    'Task_ID': np.random.randint(1, 50, n),
    'Phase': np.random.choice(['Planning', 'Foundation', 'Structure', 'Finishing', 'Landscaping'], n),
    'Material_Cost': np.random.uniform(5000, 50000, n),
    'Labor_Cost': np.random.uniform(10000, 75000, n),
    'Material_Supply_Risk': np.random.uniform(0.01, 0.99, n),  # Likelihood of supply issues
    'Supplier_Reliability': np.random.uniform(0.70, 1.00, n),   # Supplier reliability on a scale of 0.7 to 1.0
    'Delay_Days': np.random.randint(0, 30, n),                  # Delays in days
    'Weather_Risk': np.random.uniform(0.1, 0.9, n),             # Weather risk (e.g., storms)
    'Change_Orders': np.random.randint(0, 5, n),                # Change requests by client
    'Project_Completed': np.random.choice([0, 1], n),           # 0 = Incomplete, 1 = Complete
    'Final_Cost': np.nan                                       # Placeholder for final cost
}

# Create the DataFrame
df_construction = pd.DataFrame(data)

# Compute Final_Cost as a sum of Material Cost, Labor Cost, with multipliers for delays and change orders
df_construction['Final_Cost'] = (
    df_construction['Material_Cost'] +
    df_construction['Labor_Cost'] +
    (df_construction['Delay_Days'] * 500) +  # $500 per day of delay
    (df_construction['Change_Orders'] * 2000)  # $2000 per change order
)

# Step 1: Predicting Final Cost with Random Forest Regressor
# Features for predicting Final Cost
X = df_construction[['Material_Cost', 'Labor_Cost', 'Material_Supply_Risk', 'Supplier_Reliability', 'Delay_Days', 'Weather_Risk', 'Change_Orders']]
y = df_construction['Final_Cost']

# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize and train the model
model_rf = RandomForestRegressor(random_state=42)
model_rf.fit(X_train, y_train)

# Predictions
y_pred = model_rf.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print the results for Final Cost prediction
print(f"Mean Absolute Error (MAE): {mae}")
print(f"RÂ² Score: {r2}")

# Step 2: Predicting Project Completion with Logistic Regression
# Features for predicting Project Completion
X_class = df_construction[['Material_Cost', 'Labor_Cost', 'Material_Supply_Risk', 'Supplier_Reliability', 'Delay_Days', 'Weather_Risk', 'Change_Orders']]
y_class = df_construction['Project_Completed']

# Split the dataset into training and test sets
X_train_class, X_test_class, y_train_class, y_test_class = train_test_split(X_class, y_class, test_size=0.3, random_state=42)

# Initialize and train the logistic regression model
model_lr = LogisticRegression(max_iter=1000, random_state=42)
model_lr.fit(X_train_class, y_train_class)

# Predictions
y_pred_class = model_lr.predict(X_test_class)

# Evaluate the model
accuracy = accuracy_score(y_test_class, y_pred_class)
precision = precision_score(y_test_class, y_pred_class, zero_division=1)
recall = recall_score(y_test_class, y_pred_class, zero_division=1)
f1 = f1_score(y_test_class, y_pred_class, zero_division=1)

# Print the results for Project Completion prediction
print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1}")